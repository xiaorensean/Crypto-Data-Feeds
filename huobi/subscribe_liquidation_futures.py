import timeimport randomimport datetimeimport tracebackimport osimport sys current_dir = os.path.dirname(os.path.abspath(__file__))sys.path.append(os.path.dirname(current_dir))import huobi_api.HbRest as huobipkg_dir = os.path.dirname(current_dir)sys.path.append(pkg_dir)from utility.error_logger_writer import loggerfrom influxdb_client.influxdb_client_v1 import InfluxClientdb = InfluxClient()measurement = "huobidm_liquidation"trade_types = ["0","5","6"]create_dates = ["7","90"]def all_symbols():    contract_info = huobi.contract_info()    symbols = list(set([d['symbol'] for d in contract_info['data']]))    return symbolsdef write_liquidation_data(data,measurement):    for ld in data:        fields = {}        fields.update({"direction":ld["direction"]})        fields.update({"offset":ld["offset"]})        fields.update({"price":float(ld["price"])})        fields.update({"volume":int(ld["volume"])})        fields.update({"is_api_return_timestamp": True})        tags = {}        tags.update({"contract_code":ld['contract_code']})        tags.update({"symbol":ld["symbol"]})        dbtime = datetime.datetime.utcfromtimestamp((int(ld["created_at"])+random.random())/1000)        db.write_points_to_measurement(measurement,dbtime,tags,fields)    def assign_data_index(data,total_size):    data_new = []    for idx,d in enumerate(data):        temp = d        temp.update({"orderID":total_size-idx})        data_new.append(d)    return data_newdef write_all_symbols(symbol,trade_type,create_date,measurement):    liquidation = huobi.contract_liquidation_order(symbol, trade_type, create_date)['data']    data = liquidation['orders']    write_liquidation_data(data, measurement)    page_idx = liquidation['current_page']    total_page = liquidation['total_page']      while page_idx < total_page:        page_idx += 1        time.sleep(0.1)        try:            liquidation_temp = huobi.contract_liquidation_order(symbol, trade_type, create_date,page_idx)['data']        except Exception as err:            print(err)            time.sleep(10)            liquidation_temp = huobi.contract_liquidation_order(symbol, trade_type, create_date,page_idx)['data']        data = liquidation_temp['orders']        write_liquidation_data(data, measurement)    def write_three_month(measurement):    # all close long and short    trade_type = "0"    # 3 months length    create_date = "90"    #symbols = [i for i in all_symbols() if i != "BTC" or i != "LTC" or i != "ETC"]    symbols = all_symbols()    for symb in symbols:        print(symb)        write_all_symbols(symb, trade_type, create_date, measurement)def new_symbol_check(measurement):    try:        db_symbols = db.get_tag_values(measurement, "symbol")    except IndexError:        write_three_month(measurement)        return     symbols = all_symbols()    new_symbols = [symb for symb in symbols if symb not in db_symbols]    if len(new_symbols) != 0:        for symb in new_symbols:            try:                write_all_symbols(symb, "0", "90", measurement)              except Exception:                error = traceback.format_exc()                #logger(measurement,error,symb)    else:        for symb in symbols:            try:                write_all_symbols(symb, "0", "7", measurement)             except Exception:                error = traceback.format_exc()                #logger(measurement,error,symb)def subscribe_liquidation(measurement):    new_symbol_check(measurement)    while True:         time.sleep(60*60*24*7)        new_symbol_check(measurement)        if __name__ == "__main__":    #write_three_month(measurement)    subscribe_liquidation(measurement) 