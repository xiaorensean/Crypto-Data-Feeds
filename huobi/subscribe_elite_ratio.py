import timeimport tracebackimport datetime import osimport sys current_dir = os.path.dirname(os.path.abspath(__file__))sys.path.append(os.path.dirname(current_dir))import huobi_api.HbRest as huobipkg_dir = os.path.dirname(current_dir)sys.path.append(pkg_dir)from utility.error_logger_writer import loggerfrom influxdb_client.bitmex_influxdb_client_v1 import InfluxClientdb = InfluxClient()def all_symbols():    contract_info = huobi.contract_info()    symbols = list(set([d['symbol'] for d in contract_info['data']]))    return symbolsdef write_data_account(measurement,data,period,symbol):    for d in data:        fields = {}        fields.update({"buy_ratio":float(d["buy_ratio"])})        fields.update({"sell_ratio":float(d["sell_ratio"])})        fields.update({"locked_ratio":float(d["locked_ratio"])})        fields.update({"is_api_return_timestamp": True})        tags = {}        if period == "5min":            tags.update({"frequency":5})        elif period == "15min":            tags.update({"frequency":15})        elif period == "30min":            tags.update({"frequency":30})        elif period == "60min":            tags.update({"frequency":60})        elif period == "4hour":            tags.update({"frequency":240})        elif period == "1day":            tags.update({"frequency":1440})        else:            pass        tags.update({"symbol":symbol})        dbtime = datetime.datetime.utcfromtimestamp(d["ts"]/1000)        db.write_points_to_measurement(measurement, dbtime, tags, fields)                def write_data_position(measurement,data,period,symbol):    for d in data:        fields = {}        fields.update({"buy_ratio":float(d["buy_ratio"])})        fields.update({"sell_ratio":float(d["sell_ratio"])})        fields.update({"is_api_return_timestamp": True})        tags = {}        if period == "5min":            tags.update({"frequency":5})        elif period == "15min":            tags.update({"frequency":15})        elif period == "30min":            tags.update({"frequency":30})        elif period == "60min":            tags.update({"frequency":60})        elif period == "4hour":            tags.update({"frequency":240})        elif period == "1day":            tags.update({"frequency":1440})        else:            pass        tags.update({"symbol":symbol})        dbtime = datetime.datetime.utcfromtimestamp(d["ts"]/1000)        db.write_points_to_measurement(measurement, dbtime, tags, fields) def account_ratio(symbol):    measurement = "huobidm_contract_elite_account_ratio"    periods = ["5min", "15min", "30min", "60min","4hour","1day"]    for period in periods:        data = huobi.contract_elite_account_ratio(symbol, period)['data']['list']        write_data_account(measurement,data,period,symbol)        time.sleep(1)        def position_ratio(symbol):    measurement = "huobidm_contract_elite_position_ratio"    periods = ["5min", "15min", "30min", "60min","4hour","1day"]    for period in periods:        data = huobi.contract_elite_position_ratio(symbol, period)['data']['list']        write_data_position(measurement,data,period,symbol)        time.sleep(1)def subscribe_elite_data():    symbols = all_symbols()    for symb in symbols:        try:            account_ratio(symb)        except Exception:            error = traceback.format_exc()            #logger("huobidm_contract_elite_account_ratio",error,symb)        time.sleep(1)        try:            position_ratio(symb)        except Exception:            error = traceback.format_exc()            #logger("huobidm_contract_elite_position_ratio",error,symb)        time.sleep(1)    while True:        time.sleep(60*60)        symbols = all_symbols()        for symb in symbols:            try:                account_ratio(symb)            except Exception:                error = traceback.format_exc()                #logger("huobidm_contract_elite_account_ratio",error,symb)            time.sleep(1)            try:                position_ratio(symb)            except Exception:                error = traceback.format_exc()                #logger("huobidm_contract_elite_position_ratio",error,symb)   if __name__ == "__main__":    subscribe_elite_data()