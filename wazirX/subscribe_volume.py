import tracebackimport os import sysimport datetimeimport timecurrent_dir = os.path.dirname(os.path.abspath(__file__))sys.path.append(current_dir)from wazirx_api.wazirxRestApi import get_market_tickerssys.path.append(os.path.dirname(current_dir))from influxdb_client.influxdb_client_v1 import InfluxClientfrom utility.error_logger_writer import loggerdb = InfluxClient()measurement = "wazirx_tickers"# write trades data to influxdb def write_tickers_data(measurement):    data = get_market_tickers()    for symb in data:        d = data[symb]        fields = {}        fields.update({"buy":float(d["buy"])})        fields.update({"high":float(d["high"])})        fields.update({"last":float(d["last"])})        fields.update({"low":float(d["low"])})        fields.update({"open":float(d["open"])})        fields.update({"sell":float(d["sell"])})        fields.update({"volume":float(d["volume"])})        fields.update({"type":d["type"]})        fields.update({"is_api_return_timestamp": True})        tags = {}        tags.update({"symbol":d['name']})        dbtime = datetime.datetime.utcfromtimestamp(int(d["at"]))        db.write_points_to_measurement(measurement,dbtime,tags,fields)            def subscribe_tickers(measurement):    try:        write_tickers_data(measurement)    except Exception:        error_message = traceback.format_exc()        logger(measurement,error_message)    while True:        time.sleep(60*60)        try:            write_tickers_data(measurement)        except Exception:            error_message = traceback.format_exc()            logger(measurement,error_message)                        if __name__ == "__main__":    subscribe_tickers(measurement)       